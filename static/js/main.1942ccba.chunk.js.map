{"version":3,"sources":["components/TaskListItem/TaskListItem.js","redux/lists/listsActions.js","components/AddButton/AddButton.js","components/TaskList/TaskList.js","redux/lists/listsSelectors.js","components/App.js","redux/lists/listsReducer.js","redux/store.js","index.js","components/AddButton/AddButton.module.css","components/TaskList/TaskList.module.css","components/App.module.css","components/TaskListItem/TaskListItem.module.css"],"names":["TaskListItem","id","title","description","index","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","className","css","item","defaultProps","actionType","AddButton","state","isFormOpen","resetForm","setState","openFormHandler","closeFormHandler","inputChangeHandler","e","target","name","value","submitFormHandler","props","addList","addCard","isList","listId","preventDefault","shortid","cards","renderAddButton","buttonText","buttonColor","backgroundColor","onClick","style","type","Icon","renderForm","placeholderTitle","buttonTitle","form","onSubmit","onChange","placeholder","display","closeForm","this","buttonWrap","Component","mapDispatchToProps","list","payload","card","connect","TaskList","taskList","droppableId","droppableProps","itemsList","map","listItem","itemIndex","key","getLists","lists","App","onDragEnd","result","dragCard","destination","source","direction","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","listType","listsSelectors","initialState","listsReducer","newState","splice","find","listStart","listEnd","rootReducer","combineReducers","store","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1942ccba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport css from './TaskListItem.module.css';\n\nconst TaskListItem = ({ id, title, description, index }) => (\n  <Draggable draggableId={id} index={index}>\n    {provided => (\n      <li\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        className={css.item}\n      >\n        <h4>{title}</h4>\n        <p>{description}</p>\n      </li>\n    )}\n  </Draggable>\n);\n\nTaskListItem.defaultProps = {\n  description: '',\n};\n\nTaskListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default TaskListItem;\n","export const actionType = {\n  ADD_CARD: 'ADD_CARD',\n  REMOVE_CARD: 'REMOVE_CARD',\n  ADD_LIST: 'ADD_LIST',\n  REMOVE_LIST: 'REMOVE_LIST',\n  DRAG_CARD: 'DRAG_CARD',\n};\n\nexport const addList = list => ({\n  type: actionType.ADD_LIST,\n  payload: list,\n});\n\nexport const removeList = id => ({\n  type: actionType.REMOVE_LIST,\n  payload: id,\n});\n\nexport const addCard = (listId, card) => ({\n  type: actionType.ADD_CARD,\n  payload: { listId, card },\n});\n\nexport const removeCard = id => ({\n  type: actionType.REMOVE_CARD,\n  payload: id,\n});\n\nexport const dragCard = (\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  listType,\n) => ({\n  type: actionType.DRAG_CARD,\n  payload: {\n    droppableIdStart,\n    droppableIdEnd,\n    droppableIndexEnd,\n    droppableIndexStart,\n    listType,\n  },\n});\n","import React, { Component } from 'react';\nimport { Icon } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shortid from 'shortid';\nimport * as listsActions from '../../redux/lists/listsActions';\nimport css from './AddButton.module.css';\n\nclass AddButton extends Component {\n  state = { isFormOpen: false, title: '', description: '' };\n\n  resetForm = () => {\n    this.setState({ title: '', description: '' });\n  };\n\n  openFormHandler = () => {\n    this.setState({ isFormOpen: true });\n  };\n\n  closeFormHandler = () => {\n    this.setState({ isFormOpen: false });\n    this.resetForm();\n  };\n\n  inputChangeHandler = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitFormHandler = e => {\n    const { title, description } = this.state;\n    const { addList, addCard, isList, listId } = this.props;\n    e.preventDefault();\n    if (!title) return;\n    if (isList) {\n      const newList = {\n        id: shortid(),\n        title,\n        cards: [],\n      };\n      addList(newList);\n      this.closeFormHandler();\n    } else {\n      const newCard = {\n        id: shortid(),\n        title,\n        description,\n      };\n      addCard(listId, newCard);\n      this.closeFormHandler();\n    }\n  };\n\n  renderAddButton = () => {\n    const { isList } = this.props;\n\n    const buttonText = isList ? 'Add another list' : 'Add another card';\n\n    // const buttonMargin = isList ? { margin: 0 } : { margin: '0 -0.5rem' };\n\n    const buttonColor = isList\n      ? { backgroundColor: '#ebecf0' }\n      : { backgroundColor: 'transparent' };\n\n    return (\n      <button onClick={this.openFormHandler} style={buttonColor} type=\"button\">\n        <Icon>add</Icon>\n        {buttonText}\n      </button>\n    );\n  };\n\n  renderForm = () => {\n    const { title, description } = this.state;\n    const { isList } = this.props;\n    const placeholderTitle = isList\n      ? 'Enter a title for list...'\n      : 'Enter a title for task...';\n    const buttonTitle = isList ? 'Add list' : 'Add task';\n    return (\n      <form className={css.form} onSubmit={this.submitFormHandler}>\n        <input\n          onChange={this.inputChangeHandler}\n          name=\"title\"\n          placeholder={placeholderTitle}\n          value={title}\n        />\n        {!isList && (\n          <textarea\n            onChange={this.inputChangeHandler}\n            name=\"description\"\n            placeholder=\"Enter a description for task...\"\n            value={description}\n          />\n        )}\n        <div style={{ display: 'flex' }}>\n          <button type=\"submit\">{buttonTitle}</button>\n          <button\n            onClick={this.closeFormHandler}\n            className={css.closeForm}\n            type=\"button\"\n          >\n            <Icon>close</Icon>\n          </button>\n        </div>\n      </form>\n    );\n  };\n\n  render() {\n    const { isFormOpen } = this.state;\n\n    return (\n      <li className={css.buttonWrap}>\n        {isFormOpen ? this.renderForm() : this.renderAddButton()}\n      </li>\n    );\n  }\n}\n\n// const mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {\n  addList: listsActions.addList,\n  addCard: listsActions.addCard,\n};\n\nAddButton.propTypes = {\n  addList: PropTypes.func.isRequired,\n  addCard: PropTypes.func.isRequired,\n  isList: PropTypes.bool.isRequired,\n  listId: PropTypes.string.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(AddButton);\n","import React from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport TaskListItem from '../TaskListItem/TaskListItem';\nimport AddButton from '../AddButton/AddButton';\nimport css from './TaskList.module.css';\n\nconst TaskList = ({ id, title, cards, index }) => (\n  <Draggable draggableId={id} index={index}>\n    {provided => (\n      <li\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        className={css.taskList}\n      >\n        <Droppable droppableId={id}>\n          {provided => (\n            <div {...provided.droppableProps} ref={provided.innerRef}>\n              <h3>{title}</h3>\n              <ul className={css.itemsList}>\n                {cards.map((listItem, itemIndex) => (\n                  <TaskListItem\n                    key={listItem.id}\n                    index={itemIndex}\n                    id={listItem.id}\n                    title={listItem.title}\n                    description={listItem.description}\n                  />\n                ))}\n                <AddButton listId={id} />\n                {provided.placeholder}\n              </ul>\n            </div>\n          )}\n        </Droppable>\n      </li>\n    )}\n  </Draggable>\n);\n\nTaskList.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  cards: PropTypes.arrayOf.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default TaskList;\n","// eslint-disable-next-line import/prefer-default-export\nexport const getLists = state => state.lists;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport css from './App.module.css';\nimport TaskList from './TaskList/TaskList';\nimport AddButton from './AddButton/AddButton';\nimport * as listsSelectors from '../redux/lists/listsSelectors';\nimport * as listsActions from '../redux/lists/listsActions';\n\nclass App extends Component {\n  onDragEnd = result => {\n    const { dragCard } = this.props;\n    const { destination, source, type } = result;\n    if (!destination) {\n      return;\n    }\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n    dragCard(\n      source.droppableId,\n      destination.droppableId,\n      source.index,\n      destination.index,\n      type,\n    );\n  };\n\n  render() {\n    const { lists } = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"App\">\n          <h2>Hello Ihor!</h2>\n          <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n            {provided => (\n              <ul\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className={css.lists}\n              >\n                {lists.map(({ title, id, cards }, index) => (\n                  <TaskList\n                    key={id}\n                    title={title}\n                    id={id}\n                    cards={cards}\n                    index={index}\n                  />\n                ))}\n                <AddButton isList=\"true\" />\n              </ul>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lists: listsSelectors.getLists(state),\n});\n\nconst mapDispatchToProps = {\n  dragCard: listsActions.dragCard,\n};\n\nApp.defaultProps = {\n  lists: [],\n};\n\nApp.propTypes = {\n  dragCard: PropTypes.func.isRequired,\n  lists: PropTypes.arrayOf(),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { actionType } from './listsActions';\n// import * as listsSelectors from './listsSelectors';\n\nconst initialState = [\n  {\n    title: 'List Title',\n    id: '1lhkhgbk',\n    cards: [\n      {\n        id: '10lkjj',\n        title: 'Example',\n        description: 'Card Description',\n      },\n    ],\n  },\n];\n\nconst listsReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case actionType.ADD_LIST:\n      return [...state, payload];\n    case actionType.ADD_CARD: {\n      const newState = state.map(list => {\n        if (list.id === payload.listId) {\n          return {\n            ...list,\n            cards: [...list.cards, payload.card],\n          };\n        }\n        return list;\n      });\n      return newState;\n    }\n    case actionType.DRAG_CARD: {\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexEnd,\n        droppableIndexStart,\n        listType,\n      } = payload;\n\n      if (listType === 'list') {\n        const newState = [...state];\n        const list = newState.splice(droppableIndexStart, 1);\n        newState.splice(droppableIndexEnd, 0, ...list);\n        return newState;\n      }\n\n      // in the same list\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find(taskList => droppableIdStart === taskList.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state.find(list => droppableIdStart === list.id);\n\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n\n        const listEnd = state.find(list => droppableIdEnd === list.id);\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n      return [...state];\n    }\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;\n","import { createStore, combineReducers } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport listsReducer from './lists/listsReducer';\n\nconst rootReducer = combineReducers({\n  lists: listsReducer,\n});\n\nconst store = createStore(rootReducer, devToolsEnhancer());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './redux/store';\nimport './styles.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrap\":\"AddButton_buttonWrap__j8ZYl\",\"form\":\"AddButton_form__2o5VE\",\"closeForm\":\"AddButton_closeForm__39PCF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskList\":\"TaskList_taskList__eiiWo\",\"itemsList\":\"TaskList_itemsList__nRmR5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lists\":\"App_lists__agZct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TaskListItem_item__RJQ-M\"};"],"sourceRoot":""}